# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: mpf-price-service

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

resources:
  Resources:
    mpfPriceQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ${self:service}-mpf-price-queue-${self:provider.stage}

provider:
  name: aws
  runtime: nodejs8.10

# you can overwrite defaults here
  stage: dev
  region: us-east-2

  timeout: 300

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
          - "sqs:DeleteMessage"
          - "sqs:GetQueueUrl"
          - "sqs:ChangeMessageVisibility"
          - "sqs:DeleteMessageBatch"
          - "sqs:SendMessageBatch"
          - "sqs:ReceiveMessage"
          - "sqs:SendMessage"
          - "sqs:GetQueueAttributes"
          - "sqs:ChangeMessageVisibilityBatch"
      Resource:
        Fn::GetAtt:
          - mpfPriceQueue
          - Arn
    - Effect: "Allow"
      Action:
          - "sqs:DeleteMessage"
          - "dynamodb:BatchGetItem"
          - "dynamodb:ConditionCheckItem"
          - "dynamodb:PutItem"
          - "dynamodb:DeleteItem"
          - "dynamodb:GetShardIterator"
          - "dynamodb:GetItem"
          - "dynamodb:Scan"
          - "dynamodb:Query"
          - "dynamodb:UpdateItem"
          - "dynamodb:GetRecords"
      Resource: "arn:aws:dynamodb:us-east-2:041740121314:table/MPFPriceDaily"

package:
  individually: true
  exclude:
    - "**/*"  # quotes(") are needed



# you can define service wide environment variables here
#  environment:
#    variable1: value1


functions:
  retrieveMPFPrice:
    handler: retrieve-mpf-price/index.handler
    description: Retrieve MPF price from API and feed to SQS
    memorySize: 128
    package:
      include:
        - retrieve-mpf-price/**

  saveMPFPriceDynamodb:
    handler: save-mpf-price-dynamodb/index.handler
    description: Save MPF price from SQS to DynamoDB
    memorySize: 128
    # role: arn:aws:iam::041740121314:role/service-role/saveMPFPriceToDynamodb-role-o31t7pjf
    events:
          - sqs:
            arn: arn:aws:sqs:us-east-2:041740121314:${self:service}-mpf-price-queue-${self:provider.stage}
            batchSize: 10
    package:
      include:
        - save-mpf-price-dynamodb/**

    # events:
    #   - schedule: 
    #     name: MPFPriceRetrievalScheduler
    #     description: 'MPF Price Retrieval Scheduler'
    #     rate: rate(7 days)

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

# resources:
#   Resources:
#     mpfPriceQueue:
#       Type: "AWS::SQS::Queue"
#       Properties:
#         QueueName: "MPFPriceQueue2"

    # retrieveMPFPriceRole:
    #   Type: AWS::IAM::Role
    #   Properties:
    #     RoleName: mpf-price-service-retrieve-mpf-price-lambda
    #     AssumeRolePolicyDocument:
    #       Version: "2012-10-17"
    #       Statement:
    #         - Effect: Allow
    #           Principal:
    #             Service:
    #               - lambda.amazonaws.com
    #           Action: sts:AssumeRole
    #     Policies:
    #       - PolicyName: mpf-price-service-sqs
    #         PolicyDocument:
    #           Version: "2012-10-17"
    #           Statement:
    #             - Effect: "Allow"
    #               Action:
    #                   - "sqs:DeleteMessage"
    #                   - "sqs:GetQueueUrl"
    #                   - "sqs:ChangeMessageVisibility"
    #                   - "sqs:DeleteMessageBatch"
    #                   - "sqs:SendMessageBatch"
    #                   - "sqs:ReceiveMessage"
    #                   - "sqs:SendMessage"
    #                   - "sqs:GetQueueAttributes"
    #                   - "sqs:ChangeMessageVisibilityBatch"
    #               Resource: "*"

